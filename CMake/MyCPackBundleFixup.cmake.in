
include(@CMAKE_SOURCE_DIR@/CMake/BundleUtilitiesWithRPath.cmake)

#
# Avoid following symlinks encountered during FILE GLOB_RECURSE calls:
#
if(COMMAND CMAKE_POLICY)
  cmake_policy(SET CMP0009 NEW)
  if(POLICY CMP0011)
    cmake_policy(SET CMP0011 NEW)
  endif()
endif()

#-----------------------------------------------------------------------------
# gp_log_message - Convenient function allowing to both display and log a message.
# Log file: $ENV{DESTDIR}/../complete-bundles-log.txt
#-----------------------------------------------------------------------------
function(gp_log_message text)
  #message(${text})
  file(APPEND "@CMAKE_BINARY_DIR@/complete-bundles-log.txt" "${text}
")
endfunction()

#-----------------------------------------------------------------------------
# gp_clear_log - Clear the log file
#-----------------------------------------------------------------------------
function(gp_clear_log)
  file(WRITE "@CMAKE_BINARY_DIR@/complete-bundles-log.txt" "")
  gp_log_message("Log file: @CMAKE_BINARY_DIR@/complete-bundles-log.txt")
endfunction()

#-----------------------------------------------------------------------------
# gp_resolved_file_type_override resolved_file type_var
#-----------------------------------------------------------------------------
function(gp_resolved_file_type_override resolved_file type_var)
  if(resolved_file MATCHES "^/usr/.*/lib")
    set(${type_var} system PARENT_SCOPE)
  endif()
  #gp_log_message("resolving ${file} as ${${type_var}}")
endfunction()

#-----------------------------------------------------------------------------
# gp_item_default_embedded_path_override item default_embedded_path_var
#-----------------------------------------------------------------------------
# Return the path that others should refer to the item by when the item
# is embedded inside a bundle.
#
# This is a project-specific override of BundleUtilities.cmake's
# gp_item_default_embedded_path
#
function(gp_item_default_embedded_path_override item default_embedded_path_var)

  # Get name of the item (i.e. foo.dylib instead of /path/to/foo.dylib)
  get_filename_component(item_name ${item} NAME)

  # By default, embed items as set by gp_item_default_embedded_path:
  set(path "${${default_embedded_path_var}}")

  if(item MATCHES "\\.(dylib|so)$")
    set(path "@fixup_path@/@DEFAULT_LIB_DIR@") # No lib is expected to be in this folder
  endif()

  # MyLib
  set(mylib_libraries_path "@CMAKE_BINARY_DIR@/@MyLib_LIB_DIR@")
  file(GLOB mylib_libraries RELATIVE ${mylib_libraries_path} "${mylib_libraries_path}/*.dylib")
  list(FIND mylib_libraries ${item_name} IS_MYLIB)
  if(NOT IS_MYLIB EQUAL -1)
    set(path "@fixup_path@/@MyLib_LIB_DIR@")
  endif()
  #gp_log_message("IS_MYLIB:${IS_MYLIB} - item_name:${item_name}")
  
  # MyLib4Plugin
  set(mylib4plugin_libraries_path "@CMAKE_BINARY_DIR@/@MyLib4Plugin_LIB_DIR@")
  file(GLOB mylib4plugin_libraries RELATIVE ${mylib4plugin_libraries_path} "${mylib4plugin_libraries_path}/*.dylib")
  list(FIND mylib4plugin_libraries ${item_name} IS_MYLIB4PLUGIN)
  if(NOT IS_MYLIB4PLUGIN EQUAL -1)
    set(path "@fixup_path@/@MyLib4Plugin_LIB_DIR@")
  endif()
  #gp_log_message("IS_MYLIB4PLUGIN:${IS_MYLIB4PLUGIN} - item_name:${item_name}")
  
  # MyPlugin
  set(myplugin_libraries_path "@CMAKE_BINARY_DIR@/@MyPlugin_LIB_DIR@")
  file(GLOB myplugin_libraries RELATIVE ${myplugin_libraries_path} "${myplugin_libraries_path}/*.dylib")
  list(FIND myplugin_libraries ${item_name} IS_MYPLUGIN)
  if(NOT IS_MYPLUGIN EQUAL -1)
    set(path "@fixup_path@/@MyPlugin_LIB_DIR@")
  endif()
  #gp_log_message("IS_MYPLUGIN:${IS_MYPLUGIN} - item_name:${item_name}")

  math(EXPR lib_current $ENV{FIXUP_LIB_CURRENT}+1)
  set(ENV{FIXUP_LIB_CURRENT} ${lib_current})
  gp_log_message("${lib_current}/$ENV{FIXUP_LIBS_COUNT} - fixing item ${item} with ${path}")

  set(${default_embedded_path_var} "${path}" PARENT_SCOPE)
endfunction()

macro(_fixup_paths_append list var)
  if(NOT EXISTS "${var}")
    message(FATAL_ERROR "Path append to list [${list}] does NOT exist !")
  endif()

  list(APPEND ${list} ${var})
endmacro()

#-----------------------------------------------------------------------------
# Fixup the .app bundles in the install tree:
#-----------------------------------------------------------------------------
function(fixup_bundle_with_plugins app)
  set(app_dir "$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/${app}")
  set(suffix "@CMAKE_SHARED_LIBRARY_SUFFIX@")

  set(MY_BUILD_DIR "@CMAKE_BINARY_DIR@")
 
  set(candiates_pattern
    "${app_dir}/Contents/@MyPlugin_LIB_DIR@/lib*${suffix}"
    )

  set(libs "")
  file(GLOB_RECURSE candidates ${candiates_pattern})
  foreach(lib ${candidates})
    if(NOT lib MATCHES "(_debug|d[0-9])${suffix}$")
      set(libs ${libs} "${lib}")
    endif()
  endforeach()

  list(REMOVE_DUPLICATES libs)

  # Additional libs may be found in:
  set(libs_path )
  
  #list(APPEND libs_path "${MY_BUILD_DIR}")
  #list(APPEND libs_path "${MY_BUILD_DIR}/@MyLib_LIB_DIR@")
  #list(APPEND libs_path "${MY_BUILD_DIR}/@MyLib4Plugin_LIB_DIR@")
  #list(APPEND libs_path "${MY_BUILD_DIR}/@MyPlugin_LIB_DIR@")

  #list(REMOVE_DUPLICATES libs_path)

  gp_clear_log()

  gp_log_message("Calling fixup_bundle with")
  gp_log_message("app=${app}")
  gp_log_message("app_dir=${app_dir}")
  gp_log_message("<MY_BUILD_DIR>=${MY_BUILD_DIR}")
  gp_log_message("libs=")
  foreach(lib ${libs})
    file(RELATIVE_PATH relative_lib ${MY_BUILD_DIR} ${lib})
    if(NOT "${relative_lib}" STREQUAL "${lib}")
      set(lib "<MY_BUILD_DIR>/${relative_lib}")
    endif()
    gp_log_message("  ${lib}")
  endforeach()
  gp_log_message("libs_path=")
  foreach(path ${libs_path})
    file(RELATIVE_PATH relative_path ${MY_BUILD_DIR} ${path})
    if(NOT "${relative_path}" STREQUAL "${path}")
      set(path "<MY_BUILD_DIR>/${relative_path}")
    endif()
    gp_log_message("  ${path}")
  endforeach()

  # Keep track of libs count and current lib being fixed
  list(LENGTH libs libs_count)
  set(ENV{FIXUP_LIBS_COUNT} ${libs_count})
  set(ENV{FIXUP_LIB_CURRENT} 0)

  fixup_bundle(
    "${app_dir}"
    "${libs}"
    "${libs_path}"
    )
endfunction()

fixup_bundle_with_plugins("MyApp.app")

